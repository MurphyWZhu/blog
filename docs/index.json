[{"content":"不变变量 以下程序理所当然的输出5\nfn main() { let a = 5; println!(\u0026#34;{}\u0026#34;, a); } 而当你尝试改变a的值时\nfn main() { let a = 5; a = 6; println!(\u0026#34;{}\u0026#34;, a); } 则会出现错误\nerror[E0384]: cannot assign twice to immutable variable `a` --\u0026gt; src/main.rs:3:5 | 2 | let a = 5; | - | | | first assignment to `a` | help: make this binding mutable: `mut a` 3 | a = 6; | ^^^^^ cannot assign twice to immutable variable rust会很人性化的提示你哪里错了，还会给出建议\n这就是因为rust变量默认是不可改变的，要改变的话需要声明他是可变的，就像他提示的那样\nfn main() { let mut a = 5; a = 6; println!(\u0026#34;{}\u0026#34;, a); }  常量 rust变量默认不可变，那好像和常量一样，常量不光默认不能变，它总是不能变。常量只能被设置为常量表达式，而不能是函数调用的结果，或任何其他只能在运行时计算出的值。\nconst MAX_POINTS: u32 = 100_000;  数据类型 声明 let x: i64 = 10; let x = 5.5; char类型 rust的char为四个字节，代表一个unicode标量值，所以可以使用emoji、中文字符等等\nlet c = \u0026#39;z\u0026#39;; let z = \u0026#39;ℤ\u0026#39;; let heart_eyed_cat = \u0026#39;😻\u0026#39;; 元组(tup) let tup: (i32, f64, u8) = (500, 6.4, 1); let tup = (500, 6.4, 1); println!(\u0026#34;{}\u0026#34;, tup.0); 元组默认也是不可变的，也需要加mut声明可变才可改变\nlet mut tup = (50, 6.1, 5); tup.0 = 55; 数组(array) 数组是固定长度的，一旦声明，它们的长度不能增长或缩小。\nlet a = [1, 2, 3, 4, 5]; let b: [i32; 5] = [1, 2, 3, 4, 5]; let c = [3; 5];//[3,3,3,3,3] println!(\u0026#34;{}\u0026#34;, a[0]); 数组同样也是不可变的啦，也要加mut才可改变\nlet mut list = [5, 5, 5, 5];  函数 函数是面向过程的语言里非常重要的一个东西\n在rust里的函数的定义如下\nfn func_name(x: i32) -\u0026gt; i32 { x*2 } fn func_name(x: i32) -\u0026gt; i32 { return x*2 } rust函数的最后一条表达式的值当作返回值，也可以使用return返回\nrust里只有表达式才有值，函数调用也是表达式\n 控制流 if表达式 if语句也是表达式所以也有值\n一下程序会输出20\nfn main() { let a = 10; let b = if a \u0026gt; 10 { a } else { a*2 }; println!(\u0026#34;{}\u0026#34;, b); } rust的if语句中的条件只能是值为bool型的表达式\nloop循环 fn main() { loop { println!(\u0026#34;again!\u0026#34;); } } 可以用break退出循环，loop表达式的值，即是break后面的表达式的值\n下面程序会输出20\nfn main() { let mut counter = 0; let result = loop { counter += 1; if counter == 10 { break counter * 2; } }; println!(\u0026#34;The result is {}\u0026#34;, result); } while条件循环 ","permalink":"https://murphywzhu.github.io/blog/posts/rust-01/","summary":"不变变量 以下程序理所当然的输出5\nfn main() { let a = 5; println!(\u0026#34;{}\u0026#34;, a); } 而当你尝试改变a的值时\nfn main() { let a = 5; a = 6; println!(\u0026#34;{}\u0026#34;, a); } 则会出现错误\nerror[E0384]: cannot assign twice to immutable variable `a` --\u0026gt; src/main.rs:3:5 | 2 | let a = 5; | - | | | first assignment to `a` | help: make this binding mutable: `mut a` 3 | a = 6; | ^^^^^ cannot assign twice to immutable variable rust会很人性化的提示你哪里错了，还会给出建议","title":"Rust常见编程概念"},{"content":"Rust 据官网说介绍rust是一门高性能，高可靠的编程语言，最主要的特点就是安全可靠，据悉Linux内核都在考虑是否用rust代替C\nRust安装 可以使用官方的rustup来安装rust以及其他工具\nsudo pacman -S rustup 设置rustup的下载源\nexport RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup 安装rust\nrustup install stable rustup component add rust-src Helloworld\nCode % cargo new hello-world Created binary (application) `hello-world` package Code % cd hello-world hello-world[master*] % ls Cargo.toml src hello-world[master*] % cargo run Compiling hello-world v0.1.0 (/home/murphy/Code/hello-world) Finished dev [unoptimized + debuginfo] target(s) in 1.15s Running `target/debug/hello-world` Hello, world! Rust IDE rust还没有官方的IDE，我使用Clion的rust插件来写\n","permalink":"https://murphywzhu.github.io/blog/posts/rust/","summary":"Rust 据官网说介绍rust是一门高性能，高可靠的编程语言，最主要的特点就是安全可靠，据悉Linux内核都在考虑是否用rust代替C\nRust安装 可以使用官方的rustup来安装rust以及其他工具\nsudo pacman -S rustup 设置rustup的下载源\nexport RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup 安装rust\nrustup install stable rustup component add rust-src Helloworld\nCode % cargo new hello-world Created binary (application) `hello-world` package Code % cd hello-world hello-world[master*] % ls Cargo.toml src hello-world[master*] % cargo run Compiling hello-world v0.1.0 (/home/murphy/Code/hello-world) Finished dev [unoptimized + debuginfo] target(s) in 1.15s Running `target/debug/hello-world` Hello, world! Rust IDE rust还没有官方的IDE，我使用Clion的rust插件来写","title":"Rust初试"},{"content":"安装前配置 设置字体\nsetfont /usr/share/kbd/consolefonts/iso01-12x22.psfu.gz 连接网络\nwifi: iwctl 设置ntp\ntimedatectl set-ntp true 磁盘按照自己的需要分区\n将根目录挂载到/mnt\n修改镜像站\n","permalink":"https://murphywzhu.github.io/blog/posts/arch-install/","summary":"安装前配置 设置字体\nsetfont /usr/share/kbd/consolefonts/iso01-12x22.psfu.gz 连接网络\nwifi: iwctl 设置ntp\ntimedatectl set-ntp true 磁盘按照自己的需要分区\n将根目录挂载到/mnt\n修改镜像站","title":"Arch Install"},{"content":"这是第一篇文章\necho \u0026quot;Hello World!\u0026quot; ","permalink":"https://murphywzhu.github.io/blog/posts/hello-world/","summary":"这是第一篇文章\necho \u0026quot;Hello World!\u0026quot; ","title":"Hello World"}]